using OrderProcessingSystem.Workflows.Models;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Temporalio.Activities;
using static OrderProcessingSystem.Workflows.Data.Constants;
using static Temporalio.Api.Nexus.V1.EndpointTarget.Types;

namespace OrderProcessingSystem.Workflows.Activities
{
    public class OrderRelatedActions
    {
        [Activity]
        public Task NotifySupplier(Order order)
        {
            Console.WriteLine(@$"Notifying Supplier about the order: 
            \n OrderId: {order.OrderId}
            \n OrderDate: {order.OrderDate}
            \n ItemsCount: {order?.Items?.Count ?? 0}");

            foreach (var item in order?.Items)
            {
                Console.WriteLine($"Customer Ordered {item.Quantity} {item.ItemName}'s");
            }

            return Task.CompletedTask;
        }

        [Activity]
        public static byte[] GenerateInvoice(Invoice invoice)
        {
            var document = Document.Create(container =>
            {
                container.Page(page =>
                {
                    page.Size(PageSizes.A4);
                    page.Margin(20);
                    page.PageColor(Colors.White);
                    page.DefaultTextStyle(x => x.FontSize(12));

                    page.Header().Text($"Invoice #{invoice.InvoiceId}")
                        .SemiBold().FontSize(20).FontColor(Colors.Blue.Darken3);

                    page.Content().Column(column =>
                    {
                        // Customer Information
                        column.Item().Text($"Customer: {invoice.Customer?.CustomerName}");
                        column.Item().Text($"Email: {invoice.Customer?.CustomerEmail}");
                        column.Item().Text($"Address: {invoice.Customer?.CustomerAddress}");
                        column.Item().Text($"Transaction Date: {invoice.TransactionDate:dd MMM yyyy}");
                        column.Item().Text($"Estimated Delivery: {invoice.EstimatedDeliveryDate:dd MMM yyyy}");

                        column.Item().LineHorizontal(1);

                        // Order Items Table
                        column.Item().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn(4); // Item Name
                                columns.RelativeColumn(2); // Quantity
                                columns.RelativeColumn(2); // Unit Price
                                columns.RelativeColumn(2); // Total Price
                            });

                            // Table Header
                            table.Header(header =>
                            {
                                header.Cell().Text("Item Name").SemiBold();
                                header.Cell().Text("Quantity").SemiBold();
                                header.Cell().Text("Unit Price").SemiBold();
                                header.Cell().Text("Total Price").SemiBold();
                            });

                            // Table Rows
                            foreach (var item in invoice.Order?.Items ?? Enumerable.Empty<Item>())
                            {
                                table.Cell().Text(item.ItemName ?? "Unknown");
                                table.Cell().Text(item.Quantity.ToString());
                                table.Cell().Text($"₹{item.UnitPrice}");
                                table.Cell().Text($"₹{item.UnitPrice * item.Quantity}");
                            }

                            // Total Price
                            table.Footer(footer =>
                            {
                                footer.Cell().ColumnSpan(3).AlignRight().Text("Total").SemiBold();
                                footer.Cell().Text($"₹{invoice.TotalPrice}").SemiBold();
                            });
                        });

                        column.Item().LineHorizontal(1);

                        // Thank You Note
                        column.Item().Text("Thank you for your business!")
                            .FontSize(14).FontColor(Colors.Green.Darken3).AlignCenter();
                    });

                    page.Footer().AlignCenter().Text("Generated by MyCompany Invoice System")
                    .FontSize(10).FontColor(Colors.Grey.Darken2);
                });
            }).GeneratePdf();

            return document;
        }
    }
}
